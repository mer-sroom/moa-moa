// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// (추가) User Role을 관리하기 위한 enum
enum UserRole {
  USER
  SUPER_ADMIN
}

// 1. User (소셜 로그인 전용)
model User {
  id           String   @id @default(uuid()) 
  // 소셜에서 받아온 이메일 (수정 불가)
  email        String? @unique

  // NextAuth에서 user.name을 넘길 수 있으므로 추가
  name         String?

  // (추가) emailVerified 필드를 추가하여 NextAuth의 email 인증 로직을 지원
  emailVerified DateTime?

  // 사용자가 수정 가능
  nickname     String
  // 프로필 이미지 (URL 등으로 저장)
  image         String? @map("profileImage")

  // (추가) role 필드로 사용자 권한을 구분: 기본값은 USER
  role UserRole @default(USER)

  // 1:N 관계: 사용자가 소유한 MoaBox들
  moaBoxes      MoaBox[]
  // M:N(실제로는 중간테이블) 관계: 그룹 모아 참여
  participants  MoaBoxParticipant[]
  // 알림
  notifications Notification[]

  // --- (추가) Friendships Back Relation ---
  // userA와 연결된 Friendship 목록
  friendshipsA Friendship[] @relation("UserAFriendships")
  // userB와 연결된 Friendship 목록
  friendshipsB Friendship[] @relation("UserBFriendships")

  // --- (추가) Letter Back Relation ---
  // 내가 작성(author)한 Letter 목록
  lettersAuthored Letter[] @relation("UserLetters")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // 소셜 계정 중복 가입을 방지하기 위해 @@unique([provider, providerId]) 활성화
  // (NextAuth의 Account 테이블에서 관리하므로 제거)
  
  // --- NextAuth 추가: User와의 관계 ---
  accounts  Account[]
  sessions  Session[]
}

// 2. Friendship (친구 관계)
model Friendship {
  id Int @id @default(autoincrement())

  // userA
  userA   User @relation(name: "UserAFriendships", fields: [userAId], references: [id])
  userAId String

  // userB
  userB   User @relation(name: "UserBFriendships", fields: [userBId], references: [id])
  userBId String

  status String @default("ACCEPTED")
  // 예: "PENDING", "ACCEPTED", "BLOCKED" 등

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // userAId와 userBId 조합의 중복 방지
  @@unique([userAId, userBId])
}
enum DecorationType {
  NONE      // 선택 안 함
  STAR
  HEART
  RIBBON
}
// 3. MoaBox (모아 박스)
// 개인 모아 / 그룹 모아 공통
model MoaBox {
  id      Int  @id @default(autoincrement())
  // 박스를 만든 소유자
  owner   User @relation(fields: [ownerId], references: [id])
  ownerId String

  title             String?
  isGroup           Boolean   @default(false) // 그룹 모아 여부
  dueDate           DateTime? // D-Day (만기 시점)
  isPublic          Boolean   @default(true)  // 공개 여부
  allowAnonymous    Boolean   @default(true)  // 익명 편지 허용 (개인 모아만)
  shareLink         String    // 공유 링크(URL)
  letterCountPublic Boolean   @default(false) // 편지 개수 공개

  // 1:N 관계: 이 모아 박스에 달린 편지들
  letters      Letter[]
  // 그룹 모아 참여자
  participants MoaBoxParticipant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  //--- (추가) 디자인 요소 컬럼  ---
  // 배경 이미지
  backgroundDesignId Int  
  backgroundDesign   BackgroundDesign? @relation(fields: [backgroundDesignId], references: [id])

  // 우편함 이미지
  mailBoxDesignId    Int 
  mailBoxDesign      MailBoxDesign? @relation(fields: [mailBoxDesignId], references: [id])

  decorationType     DecorationType    @default(NONE)
}

// 4. MoaBoxParticipant (그룹 모아 참가자)
// 그룹 모아에 초대받은 사용자 정보
model MoaBoxParticipant {
  id Int @id @default(autoincrement())

  user     User   @relation(fields: [userId], references: [id])
  userId   String
  moaBox   MoaBox @relation(fields: [moaBoxId], references: [id])
  moaBoxId Int

  // 모두가 오너 권한을 가지는 경우, 기본값을 OWNER
  role String @default("OWNER")

  // "INVITED" → 알림 확인 후 "ACCEPTED" / "REJECTED"
  status String @default("INVITED")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // 중복 참여 방지
  @@unique([userId, moaBoxId])
}

// 5. Letter (편지)
model Letter {
  id Int @id @default(autoincrement())

  // 어떤 MoaBox(개인/그룹)에 달린 편지인지
  moaBox   MoaBox @relation(fields: [moaBoxId], references: [id])
  moaBoxId Int

  // 작성자가 로그인 유저라면 연결, 익명이면 null
  author     User?   @relation(name: "UserLetters", fields: [authorId], references: [id])
  authorId   String?
  authorName String? // 익명 편지 시 닉네임

  title    String?
  content  String
  theme    String?
  isOpened Boolean @default(false)
  //--- (추가) 첨부된 노래 Id --- 
  trackId  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  //--- (추가) 디자인 요소 컬럼  ---
  //편지지 이미지
  letterPaperDesignId   Int
  letterPaperDesign     LetterPaperDesign? @relation(fields: [letterPaperDesignId], references: [id])

  //편지 아이콘 이미지지
  letterIconDesignId    Int
  letterIconDesign      LetterIconDesign?  @relation(fields: [letterIconDesignId], references: [id])
}

// 6. Notification (알림)
model Notification {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId String

  // 알림 종류 예: "WELCOME", "LETTER_RECEIVED", "INVITE_GROUP_MOA", "FRIEND_REQUEST"
  type    String
  message String?
  payload Json?
  read    Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

// --- (추가) 모아박스 디자인 테이블 추가 ---
// 7. BackgroundDesign (배경 이미지)
model BackgroundDesign {
  id              Int  @id @default(autoincrement()) 
  name            String

  //이미지 URL
  imageURL        String

 //moaBox와 1:N
  moaBoxes        MoaBox[]

  createdAt       DateTime @default(now())               
  updatedAt       DateTime @default(now())                  
}

// 8. MailBoxDesign (우편함 이미지)
model MailBoxDesign {
  id              Int  @id @default(autoincrement()) 
  name            String

  // 이미지 URL
  imageURL        String

  //moaBox와 1:N
  moaBoxes        MoaBox[]

  createdAt       DateTime @default(now())               
  updatedAt       DateTime @default(now())                    
}

// --- (추가) 편지 디자인 테이블 추가 ---
// 9. LetterPaperDesign (편지지 이미지)
model LetterPaperDesign {
  id              Int  @id @default(autoincrement()) 
  name            String

  //이미지 URL
  imageURL  String

 //letter와 1:N
  letters         Letter[]

  createdAt       DateTime @default(now())              
  updatedAt       DateTime @default(now())                   
}

// 10. LetterIconDesign (편지 아이콘 이미지)
model LetterIconDesign {
  id              Int  @id @default(autoincrement()) 
  name            String
  
  // 이미지 URL
  imageURL         String

  //letter와 1:N
  letters         Letter[]

  createdAt       DateTime @default(now())              
  updatedAt       DateTime @default(now())                   
}


// ---------------------------
// (추가) NextAuth 표준 모델
// ---------------------------

// Account: 각 소셜(Provider)별 계정 정보 저장
model Account {
  id                        Int      @id @default(autoincrement())
  userId                    String
  type                      String
  provider                  String
  providerAccountId         String
  refresh_token             String?  @db.Text
  access_token              String?  @db.Text
  expires_at                Int?
  token_type                String?
  scope                     String?
  id_token                  String?  @db.Text
  session_state             String?
  refresh_token_expires_in  Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Session: (DB 기반 세션 사용 시) 세션 정보 저장
model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// VerificationToken: (이메일 인증 등) 토큰 보관
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  @@id([identifier, token])
}
